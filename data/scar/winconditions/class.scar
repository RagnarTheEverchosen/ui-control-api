function Class()
    local class = {}    
    class.__index = class

    function class:extends(super)
        self.__super = super
        for k,v in pairs(super) do
            if (k ~= '__index' 
			and k ~= 'constructor'
			and k ~= 'new') then
                self[k] = v
            end
        end

        return super
    end
    
    function class:new(...)
        local instance = {}
        setmetatable(instance, self)
        
        if (self.constructor) then
            self.constructor(instance, ...)
        end
        
        return instance
    end

    function class:clone()
        local clone = {}

        for k,v in pairs(self) do
            clone[k] = v
        end

        return clone
    end

    function class:isA(other)
        local metatable = getmetatable(self)

        while (metatable) do
            if (metatable == other) then
                return true
            end
            metatable = metatable.__super
        end

        return false
    end
    
    local metatable = {}
    setmetatable(class, metatable)
	
	function metatable:__call(instance, ...)		
		if (class.constructor) then
			class.constructor(instance, ...)
		end
	end
    
    function metatable:__tostring()
        return self.name
    end

    return class
end
